<?xml version="1.0"?>
<robot xmlns:xacro="http://ros.org/wiki/xacro"
       name="bmw_ur5_combined">


  <!-- 1) Declare your two file arguments -->
  <xacro:arg name="controllers_file"
             default="$(find ur_simulation_gazebo)/config/ur_controllers.yaml"/>
  <xacro:arg name="initial_positions_file"
             default="$(find ur_description)/config/initial_positions.yaml"/>

  <!-- 2) Preload the joint-positions YAML so we can pass it into the UR macro -->
  <xacro:property
    name="initial_positions"
    value="${xacro.load_yaml(initial_positions_file)}"/>

  <!-- 3) BMW base (hard-coded include path) -->
  <xacro:include
    filename="/home/christopher/warde/src/ROS2_4wheel_autonomous_robot/src/robot_description/urdf/inc/bmw_macro.xacro"/>
  <xacro:bmw_car prefix="bmw_"/>

  <!-- 4) UR robot macros -->
  <xacro:include
    filename="/home/christopher/warde/src/Universal_Robots_ROS2_Description/urdf/ur_macro.xacro"/>

  <!-- 5) Instantiate the UR5 arm, force sim_gazebo on inside the macro -->
  <xacro:ur_robot
    name="ur5"
    tf_prefix="ur5_"
    parent="chassis"

    joint_limits_parameters_file="$(find ur_description)/config/ur5/joint_limits.yaml"
    kinematics_parameters_file="$(find ur_description)/config/ur5/default_kinematics.yaml"
    physical_parameters_file="$(find ur_description)/config/ur5/physical_parameters.yaml"
    visual_parameters_file="$(find ur_description)/config/ur5/visual_parameters.yaml"

    use_fake_hardware="true"
    fake_sensor_commands="true"
    sim_gazebo="true"
    generate_ros2_control_tag="true"

    initial_positions="${initial_positions}"
  >
    <origin xyz="-0.18 0 0.225" rpy="0 0 0"/>
  </xacro:ur_robot>

  <!-- 6) Gazebo-ROS2-control plugin, now fed your controllers_file -->
  <gazebo reference="world"/>
  <gazebo>
    <plugin filename="libgazebo_ros2_control.so"
            name="gazebo_ros2_control">
      <parameters>${controllers_file}</parameters>
    </plugin>
  </gazebo>

</robot>
